name = ifelse(index == 298, str_replace(name, "PJJ", "OJJ"), name),
parts = str_split(name, "_+|(?<=[A-Za-z])(?=\\d{4,6})|(?<=\\d{4,6})(?=[A-Za-z])", simplify = TRUE),
num_parts = ncol(parts),
paciente = parts[,1],
dia = case_when(
str_detect(parts[,2], "^\\d{6}$") ~ str_c(substr(parts[,2], 1, 2), "-", substr(parts[,2], 3, 4)),
str_detect(parts[,2], "^\\d{4}$") ~ str_c(substr(parts[,2], 1, 2), "-", substr(parts[,2], 3, 4)),
index <= 45 ~ "00-00", # Asignar fecha 0 a las primeras 45 filas
TRUE ~ NA_character_
),
replica_b = ifelse(num_parts >= 3, parts[,num_parts-2], NA),
replica_t = ifelse(num_parts >= 3, parts[,num_parts-1], NA)
) %>%
select(index, name, paciente, dia, replica_b, replica_t)
# Función para procesar cada nombre
df <- data.frame(index = 1:length(file_names), name = file_names) %>%
mutate(
name = str_remove(name, "\\..*$"), # Remover extensión
name = str_remove(name, "ok$"),     # Remover "ok" al final si está
name = ifelse(index == 298, str_replace(name, "PJJ", "OJJ"), name),
parts = str_split(name, "_+|(?<=[A-Za-z])(?=\\d{4,6})|(?<=\\d{4,6})(?=[A-Za-z])", simplify = TRUE),
num_parts = ncol(parts),
paciente = case_when(
index <= 45 ~ parts[,1],
index >= 46 & index <= 54 ~ substr(parts[,2], 7, nchar(parts[,2])),
index >= 299 & index <= 307 ~ substr(parts[,2], 7, nchar(parts[,2])),
TRUE ~ parts[,1]
),
dia = case_when(
index <= 45 ~ "00-00", # Asignar fecha 0 a las primeras 45 filas
index >= 46 & index <= 54 ~ str_c(substr(parts[,1], 1, 2), "-", substr(parts[,1], 3, 4)),
index >= 299 & index <= 307 ~ str_c(substr(parts[,1], 1, 2), "-", substr(parts[,1], 3, 4)),
str_detect(parts[,2], "^\\d{6}$") ~ str_c(substr(parts[,2], 1, 2), "-", substr(parts[,2], 3, 4)),
str_detect(parts[,2], "^\\d{4}$") ~ str_c(substr(parts[,2], 1, 2), "-", substr(parts[,2], 3, 4)),
TRUE ~ NA_character_
),
replica_b = case_when(
index <= 45 ~ parts[,2],
index >= 46 & index <= 54 ~ substr(parts[,3], 1, 1),
index >= 299 & index <= 307 ~ substr(parts[,3], 1, 1),
num_parts >= 3 ~ parts[,num_parts-2],
TRUE ~ NA_character_
),
replica_t = case_when(
index <= 45 ~ parts[,3],
index >= 46 & index <= 54 ~ substr(parts[,3], 3, nchar(parts[,3])),
index >= 299 & index <= 307 ~ substr(parts[,3], 3, nchar(parts[,3])),
num_parts >= 3 ~ parts[,num_parts-1],
TRUE ~ NA_character_
)
) %>%
select(index, name, paciente, dia, replica_b, replica_t)
View(df)
# Extraer los nombres de archivo
file_names <- sapply(Spectra_list, function(x) x@metaData[["name"]])
# Función para procesar cada nombre
df <- data.frame(index = 1:length(file_names), name = file_names) %>%
mutate(
name = str_remove(name, "\\..*$"), # Remover extensión
name = str_remove(name, "ok$"),     # Remover "ok" al final si está
name = ifelse(index == 298, str_replace(name, "PJJ", "OJJ"), name),
parts = str_split(name, "_+|(?<=[A-Za-z])(?=\\d{4,6})|(?<=\\d{4,6})(?=[A-Za-z])", simplify = TRUE),
num_parts = ncol(parts),
paciente = parts[,1],
dia = case_when(
str_detect(parts[,2], "^\\d{6}$") ~ str_c(substr(parts[,2], 1, 2), "-", substr(parts[,2], 3, 4)),
str_detect(parts[,2], "^\\d{4}$") ~ str_c(substr(parts[,2], 1, 2), "-", substr(parts[,2], 3, 4)),
index <= 45 ~ "00-00", # Asignar fecha 0 a las primeras 45 filas
TRUE ~ NA_character_
),
replica_b = ifelse(num_parts >= 3, parts[,num_parts-2], NA),
replica_t = ifelse(num_parts >= 3, parts[,num_parts-1], NA)
) %>%
select(index, name, paciente, dia, replica_b, replica_t)
View(df)
# Extraer los nombres de archivo
file_names <- sapply(Spectra_list, function(x) x@metaData[["name"]])
# Función para procesar cada nombre
df <- data.frame(index = 1:length(file_names), name = file_names) %>%
mutate(
name = str_remove(name, "\\..*$"), # Remover extensión
name = str_remove(name, "ok$"),     # Remover "ok" al final si está
name = ifelse(index == 298, str_replace(name, "PJJ", "OJJ"), name),
parts = str_split(name, "_+|(?<=[A-Za-z])(?=\\d{4,6})|(?<=\\d{4,6})(?=[A-Za-z])", simplify = TRUE),
num_parts = ncol(parts),
paciente = case_when(
index <= 45 ~ parts[,1],
index %in% c(46:54, 299:307) ~ substr(parts[,2], 7, nchar(parts[,2])),
TRUE ~ parts[,1]
),
dia = case_when(
index <= 45 ~ "00-00", # Asignar fecha 0 a las primeras 45 filas
index %in% c(46:54, 299:307) ~ str_c(substr(parts[,1], 1, 2), "-", substr(parts[,1], 3, 4)),
str_detect(parts[,2], "^\\d{6}$") ~ str_c(substr(parts[,2], 1, 2), "-", substr(parts[,2], 3, 4)),
str_detect(parts[,2], "^\\d{4}$") ~ str_c(substr(parts[,2], 1, 2), "-", substr(parts[,2], 3, 4)),
TRUE ~ NA_character_
),
replica_b = case_when(
index <= 45 ~ parts[,2],
index %in% c(46:54, 299:307) ~ parts[,3],
num_parts >= 3 ~ parts[,num_parts-2],
TRUE ~ NA
),
replica_t = case_when(
index <= 45 ~ parts[,3],
index %in% c(46:54, 299:307) ~ parts[,4],
num_parts >= 3 ~ parts[,num_parts-1],
TRUE ~ NA
)
) %>%
select(index, name, paciente, dia, replica_b, replica_t)
View(df)
# Extraer los nombres de archivo
file_names <- sapply(Spectra_list, function(x) x@metaData[["name"]])
# Función para procesar cada nombre
df <- data.frame(index = 1:length(file_names), name = file_names) %>%
mutate(
name = str_remove(name, "\\..*$"), # Remover extensión
name = str_remove(name, "ok$"),     # Remover "ok" al final si está
name = ifelse(index == 298, str_replace(name, "PJJ", "OJJ"), name),
parts = str_split(name, "_+|(?<=[A-Za-z])(?=\\d{4,6})|(?<=\\d{4,6})(?=[A-Za-z])", simplify = TRUE),
num_parts = ncol(parts),
paciente = case_when(
index <= 45 ~ parts[,1],
index %in% c(46:54, 299:307) ~ substr(parts[,2], 7, nchar(parts[,2])),
TRUE ~ parts[,1]
),
dia = case_when(
index <= 45 ~ "00-00", # Asignar fecha 0 a las primeras 45 filas
index %in% c(46:54, 299:307) ~ str_c(substr(parts[,1], 1, 2), "-", substr(parts[,1], 3, 4)),
str_detect(parts[,2], "^\\d{6}$") ~ str_c(substr(parts[,2], 1, 2), "-", substr(parts[,2], 3, 4)),
str_detect(parts[,2], "^\\d{4}$") ~ str_c(substr(parts[,2], 1, 2), "-", substr(parts[,2], 3, 4)),
TRUE ~ NA_character_
),
replica_b = case_when(
index <= 45 ~ parts[,2],
index %in% c(46:54, 299:307) ~ parts[,num_parts - 1],
num_parts >= 3 ~ parts[,num_parts - 2],
TRUE ~ NA_character_
),
replica_t = case_when(
index <= 45 ~ parts[,3],
index %in% c(46:54, 299:307) ~ parts[,num_parts],
num_parts >= 3 ~ parts[,num_parts - 1],
TRUE ~ NA_character_
)
) %>%
select(index, name, paciente, dia, replica_b, replica_t)
View(df)
# Extraer los nombres de archivo
file_names <- sapply(Spectra_list, function(x) x@metaData[["name"]])
# Función para procesar cada nombre
df <- data.frame(index = 1:length(file_names), name = file_names) %>%
mutate(
name = str_remove(name, "\\..*$"), # Remover extensión
name = str_remove(name, "ok$"),     # Remover "ok" al final si está
name = ifelse(index == 298, str_replace(name, "PJJ", "OJJ"), name),
parts = str_split(name, "_+|(?<=[A-Za-z])(?=\\d{4,6})|(?<=\\d{4,6})(?=[A-Za-z])", simplify = TRUE),
num_parts = ncol(parts),
paciente = parts[,1],
dia = case_when(
str_detect(parts[,2], "^\\d{6}$") ~ str_c(substr(parts[,2], 1, 2), "-", substr(parts[,2], 3, 4)),
str_detect(parts[,2], "^\\d{4}$") ~ str_c(substr(parts[,2], 1, 2), "-", substr(parts[,2], 3, 4)),
index <= 45 ~ "00-00", # Asignar fecha 0 a las primeras 45 filas
TRUE ~ NA_character_
),
replica_b = ifelse(num_parts >= 3, parts[,num_parts-2], NA),
replica_t = ifelse(num_parts >= 3, parts[,num_parts-1], NA)
) %>%
select(index, name, paciente, dia, replica_b, replica_t)
View(df)
# Crear una copia del DataFrame original para modificar solo los intervalos problemáticos
df_corrigido <- df
# Recorrer solo los índices problemáticos
for (i in 1:nrow(df_corrigido)) {
if (i >= 1 && i <= 45) {  # Intervalo 1-45
parts <- unlist(strsplit(df_corrigido$name[i], "_"))
df_corrigido$paciente[i] <- parts[1]
df_corrigido$dia[i] <- "00-00"
df_corrigido$replica_b[i] <- parts[2]
df_corrigido$replica_t[i] <- parts[3]
} else if (i >= 46 && i <= 54 || i >= 299 && i <= 307) {  # Intervalos 46-54 y 299-307
name_parts <- gsub("(\\d{6})([A-Za-z]+)(\\d+)_(\\d+)", "\\1_\\2_\\3_\\4", df_corrigido$name[i])
parts <- unlist(strsplit(name_parts, "_"))
df_corrigido$dia[i] <- paste0(substr(parts[1], 1, 2), "-", substr(parts[1], 3, 4))
df_corrigido$paciente[i] <- parts[2]
df_corrigido$replica_b[i] <- parts[3]
df_corrigido$replica_t[i] <- parts[4]
}
}
View(df_corrigido)
View(Spectra_list)
Spectra_list[[1]]@metaData[["file"]]
# Definir los patrones
patron_ctl_sano <- "CTL_SANO"
patron_ctl_uti <- "CTL_UTI"
patron_sepsis <- "SEPSIS"
patron_shock <- "SHOCK"
# Crear una nueva columna para el estado
df$estado <- NA
# Recorrer las filas del dataframe
for (i in 1:nrow(df)) {
# Obtener el nombre del archivo
nombre <- Spectra_list[[i]]@metaData$file
# Comprobar los patrones y asignar el estado correspondiente
if (str_detect(nombre, patron_ctl_sano)) {
df$estado[i] <- "CTL_SANO"
} else if (str_detect(nombre, patron_ctl_uti)) {
df$estado[i] <- "CTL_UTI"
} else if (str_detect(nombre, patron_sepsis)) {
df$estado[i] <- "SEPSIS"
} else if (str_detect(nombre, patron_shock)) {
df$estado[i] <- "SHOCK"
}
}
# Crear una nueva columna para el estado
df_metadatos$estado <- NA
################ MALDI-TOF OTAMENDI ############################################
################ 1) PREPROCESAMIENTO  ##########################################
################ Primeras muestras  ############################################
#
# Autor: Bioing. Facundo Urteaga (IBB-CONICET)
#
#
### CARGA DE LIBRERIAS #########################################################
################################################################################
library(binda)
library(here)
library(dplyr)
library(readBrukerFlexData)
library(MALDIquant)
library(MALDIquantForeign)
library(MALDIrppa)
library(stringr)
### CARGA DE ESPECTROS #########################################################
################################################################################
# Creación de la ruta relativa de los archivos (Uno p/cada, corregir)
ruta_proyecto <- "C:/Users/urtea/OneDrive/Documents/Proyectos/MALDI_Otamendi_plasma/Datos"
#ruta_proyecto <- "C:/Users/Facundo/Documents/Proyectos/MALDI_Vinchucas/Datos/PBMC"
ruta_datos <- file.path(ruta_proyecto)
# Importar espectros
Spectra_list <- importBrukerFlex(file.path(ruta_datos), verbose=FALSE)
library(dplyr)
library(stringr)
library(lubridate)
# Extraer los nombres de archivo
file_names <- sapply(Spectra_list, function(x) x@metaData[["name"]])
# Función para procesar cada nombre
df <- data.frame(index = 1:length(file_names), name = file_names) %>%
mutate(
name = str_remove(name, "\\..*$"), # Remover extensión
name = str_remove(name, "ok$"),     # Remover "ok" al final si está
name = ifelse(index == 298, str_replace(name, "PJJ", "OJJ"), name),
parts = str_split(name, "_+|(?<=[A-Za-z])(?=\\d{4,6})|(?<=\\d{4,6})(?=[A-Za-z])", simplify = TRUE),
num_parts = ncol(parts),
paciente = parts[,1],
dia = case_when(
str_detect(parts[,2], "^\\d{6}$") ~ str_c(substr(parts[,2], 1, 2), "-", substr(parts[,2], 3, 4)),
str_detect(parts[,2], "^\\d{4}$") ~ str_c(substr(parts[,2], 1, 2), "-", substr(parts[,2], 3, 4)),
index <= 45 ~ "00-00", # Asignar fecha 0 a las primeras 45 filas
TRUE ~ NA_character_
),
replica_b = ifelse(num_parts >= 3, parts[,num_parts-2], NA),
replica_t = ifelse(num_parts >= 3, parts[,num_parts-1], NA)
) %>%
select(index, name, paciente, dia, replica_b, replica_t)
# Crear una copia del DataFrame original para modificar solo los intervalos problemáticos
df_metadatos <- df
# Recorrer solo los índices problemáticos
for (i in 1:nrow(df_metadatos)) {
if (i >= 1 && i <= 45) {  # Intervalo 1-45
parts <- unlist(strsplit(df_metadatos$name[i], "_"))
df_metadatos$paciente[i] <- parts[1]
df_metadatos$dia[i] <- "00-00"
df_metadatos$replica_b[i] <- parts[2]
df_metadatos$replica_t[i] <- parts[3]
} else if (i >= 46 && i <= 54 || i >= 299 && i <= 307) {  # Intervalos 46-54 y 299-307
name_parts <- gsub("(\\d{6})([A-Za-z]+)(\\d+)_(\\d+)", "\\1_\\2_\\3_\\4", df_metadatos$name[i])
parts <- unlist(strsplit(name_parts, "_"))
df_metadatos$dia[i] <- paste0(substr(parts[1], 1, 2), "-", substr(parts[1], 3, 4))
df_metadatos$paciente[i] <- parts[2]
df_metadatos$replica_b[i] <- parts[3]
df_metadatos$replica_t[i] <- parts[4]
}
}
### OBTENCIÓN DE METADATA DE ESPECTROS #########################################
################################################################################
# Definir los patrones
patron_ctl_sano <- "CTL_SANO"
patron_ctl_uti <- "CTL_UTI"
patron_sepsis <- "SEPSIS"
patron_shock <- "SHOCK"
# Crear una nueva columna para el estado
df_metadatos$estado <- NA
# Recorrer las filas del dataframe
for (i in 1:nrow(df_metadatos)) {
# Obtener el nombre del archivo
nombre <- Spectra_list[[i]]@metaData$file
# Comprobar los patrones y asignar el estado correspondiente
if (str_detect(nombre, patron_ctl_sano)) {
df_metadatos$estado[i] <- "CTL_SANO"
} else if (str_detect(nombre, patron_ctl_uti)) {
df_metadatos$estado[i] <- "CTL_UTI"
} else if (str_detect(nombre, patron_sepsis)) {
df_metadatos$estado[i] <- "SEPSIS"
} else if (str_detect(nombre, patron_shock)) {
df_metadatos$estado[i] <- "SHOCK"
}
}
View(df_metadatos)
View(df_metadatos)
View(df_metadatos)
# Extraer los nombres de archivo
file_names <- sapply(Spectra_list, function(x) x@metaData[["name"]])
# Función para procesar cada nombre
df <- data.frame(index = 1:length(file_names), name = file_names) %>%
mutate(
name = str_remove(name, "\\..*$"), # Remover extensión
name = str_remove(name, "ok$"),     # Remover "ok" al final si está
name = ifelse(index == 298, str_replace(name, "PJJ", "OJJ"), name),
parts = str_split(name, "_+|(?<=[A-Za-z])(?=\\d{4,6})|(?<=\\d{4,6})(?=[A-Za-z])", simplify = TRUE),
num_parts = ncol(parts),
paciente = parts[,1],
dia = case_when(
str_detect(parts[,2], "^\\d{6}$") ~ str_c(substr(parts[,2], 1, 2), "-", substr(parts[,2], 3, 4)),
str_detect(parts[,2], "^\\d{4}$") ~ str_c(substr(parts[,2], 1, 2), "-", substr(parts[,2], 3, 4)),
index <= 45 ~ "00-00", # Asignar fecha 0 a las primeras 45 filas
TRUE ~ NA_character_
),
replica_b = ifelse(num_parts >= 3, parts[,num_parts-2], NA),
replica_t = ifelse(num_parts >= 3, parts[,num_parts-1], NA)
) %>%
select(index, name, paciente, dia, replica_b, replica_t)
# Crear una copia del DataFrame original para modificar solo los intervalos problemáticos
df_metadatos <- df
# Recorrer solo los índices problemáticos
for (i in 1:nrow(df_metadatos)) {
if (i >= 1 && i <= 45) {  # Intervalo 1-45
parts <- unlist(strsplit(df_metadatos$name[i], "_"))
df_metadatos$paciente[i] <- parts[1]
df_metadatos$dia[i] <- "00-00"
df_metadatos$replica_b[i] <- parts[2]
df_metadatos$replica_t[i] <- parts[3]
} else if (i >= 46 && i <= 54 || i >= 299 && i <= 307) {  # Intervalos 46-54 y 299-307
name_parts <- gsub("(\\d{6})([A-Za-z]+)(\\d+)_(\\d+)", "\\1_\\2_\\3_\\4", df_metadatos$name[i])
parts <- unlist(strsplit(name_parts, "_"))
df_metadatos$dia[i] <- paste0(substr(parts[1], 1, 2), "-", substr(parts[1], 3, 4))
df_metadatos$paciente[i] <- parts[2]
df_metadatos$replica_b[i] <- parts[3]
df_metadatos$replica_t[i] <- parts[4]
}
}
### OBTENCIÓN DE METADATA DE ESPECTROS #########################################
################################################################################
# Definir los patrones
patron_ctl_sano <- "CTL_SANO"
patron_ctl_uti <- "CTL_UTI"
patron_sepsis <- "SEPSIS"
patron_shock <- "SHOCK"
# Crear una nueva columna para el estado
df_metadatos$estado <- NA
# Recorrer las filas del dataframe
for (i in 1:nrow(df_metadatos)) {
# Obtener el nombre del archivo
nombre <- Spectra_list[[i]]@metaData$file
# Comprobar los patrones y asignar el estado correspondiente
if (str_detect(nombre, patron_ctl_sano)) {
df_metadatos$estado[i] <- "CTL_SANO"
} else if (str_detect(nombre, patron_ctl_uti)) {
df_metadatos$estado[i] <- "CTL_UTI"
} else if (str_detect(nombre, patron_sepsis)) {
df_metadatos$estado[i] <- "SEPSIS"
} else if (str_detect(nombre, patron_shock)) {
df_metadatos$estado[i] <- "SHOCK"
}
# Guardo metadata en el espectro
Spectra_list[[i]]@metaData$estado <- df_metadatos$estado[i]
Spectra_list[[i]]@metaData$paciente <- df_metadatos$paciente[i]
Spectra_list[[i]]@metaData$dia <- df_metadatos$dia[i]
Spectra_list[[i]]@metaData$replica_b <- df_metadatos$replica_b[i]
Spectra_list[[i]]@metaData$replica_t <- df_metadatos$replica_t[i]
}
# Suponiendo que tu DataFrame se llama df_metadatos
# Primero, convertir la columna "dia" a formato de fecha (año arbitrario para poder convertir a Date)
df_metadatos$fecha <- as.Date(paste0("2025-", df_metadatos$dia), format = "%Y-%d-%m")
# Ahora, agrupar por paciente y calcular el "día 0"
df_metadatos <- df_metadatos %>%
group_by(paciente) %>%
mutate(
# Calcular el día 0 como la fecha más antigua de cada paciente
dia_0 = min(fecha),
# Crear la nueva columna "dia_abs" con la diferencia en días desde el día 0
dia_abs = as.numeric(fecha - dia_0)
) %>%
ungroup() %>%
select(-dia_0) # Eliminar la columna temporal "dia_0" si no la necesitas
View(df_metadatos)
################ MALDI-TOF OTAMENDI ############################################
################ 1) PREPROCESAMIENTO  ##########################################
################ Primeras muestras  ############################################
#
# Autor: Bioing. Facundo Urteaga (IBB-CONICET)
#
#
### CARGA DE LIBRERIAS #########################################################
################################################################################
library(binda)
library(here)
library(dplyr)
library(readBrukerFlexData)
library(MALDIquant)
library(MALDIquantForeign)
library(MALDIrppa)
library(stringr)
### CARGA DE ESPECTROS #########################################################
################################################################################
# Creación de la ruta relativa de los archivos (Uno p/cada, corregir)
ruta_proyecto <- "C:/Users/urtea/OneDrive/Documents/Proyectos/MALDI_Otamendi_plasma/Datos"
#ruta_proyecto <- "C:/Users/Facundo/Documents/Proyectos/MALDI_Vinchucas/Datos/PBMC"
ruta_datos <- file.path(ruta_proyecto)
# Importar espectros
Spectra_list <- importBrukerFlex(file.path(ruta_datos), verbose=FALSE)
library(dplyr)
library(stringr)
library(lubridate)
# Extraer los nombres de archivo
file_names <- sapply(Spectra_list, function(x) x@metaData[["name"]])
# Función para procesar cada nombre
df <- data.frame(index = 1:length(file_names), name = file_names) %>%
mutate(
name = str_remove(name, "\\..*$"), # Remover extensión
name = str_remove(name, "ok$"),     # Remover "ok" al final si está
name = ifelse(index == 298, str_replace(name, "PJJ", "OJJ"), name),
parts = str_split(name, "_+|(?<=[A-Za-z])(?=\\d{4,6})|(?<=\\d{4,6})(?=[A-Za-z])", simplify = TRUE),
num_parts = ncol(parts),
paciente = parts[,1],
dia = case_when(
str_detect(parts[,2], "^\\d{6}$") ~ str_c(substr(parts[,2], 1, 2), "-", substr(parts[,2], 3, 4)),
str_detect(parts[,2], "^\\d{4}$") ~ str_c(substr(parts[,2], 1, 2), "-", substr(parts[,2], 3, 4)),
index <= 45 ~ "00-00", # Asignar fecha 0 a las primeras 45 filas
TRUE ~ NA_character_
),
replica_b = ifelse(num_parts >= 3, parts[,num_parts-2], NA),
replica_t = ifelse(num_parts >= 3, parts[,num_parts-1], NA)
) %>%
select(index, name, paciente, dia, replica_b, replica_t)
# Crear una copia del DataFrame original para modificar solo los intervalos problemáticos
df_metadatos <- df
# Recorrer solo los índices problemáticos
for (i in 1:nrow(df_metadatos)) {
if (i >= 1 && i <= 45) {  # Intervalo 1-45
parts <- unlist(strsplit(df_metadatos$name[i], "_"))
df_metadatos$paciente[i] <- parts[1]
df_metadatos$dia[i] <- "00-00"
df_metadatos$replica_b[i] <- parts[2]
df_metadatos$replica_t[i] <- parts[3]
} else if (i >= 46 && i <= 54 || i >= 299 && i <= 307) {  # Intervalos 46-54 y 299-307
name_parts <- gsub("(\\d{6})([A-Za-z]+)(\\d+)_(\\d+)", "\\1_\\2_\\3_\\4", df_metadatos$name[i])
parts <- unlist(strsplit(name_parts, "_"))
df_metadatos$dia[i] <- paste0(substr(parts[1], 1, 2), "-", substr(parts[1], 3, 4))
df_metadatos$paciente[i] <- parts[2]
df_metadatos$replica_b[i] <- parts[3]
df_metadatos$replica_t[i] <- parts[4]
}
}
### OBTENCIÓN DE METADATA DE ESPECTROS #########################################
################################################################################
# Definir los patrones
patron_ctl_sano <- "CTL_SANO"
patron_ctl_uti <- "CTL_UTI"
patron_sepsis <- "SEPSIS"
patron_shock <- "SHOCK"
# Crear una nueva columna para el estado
df_metadatos$estado <- NA
# Recorrer las filas del dataframe
for (i in 1:nrow(df_metadatos)) {
# Obtener el nombre del archivo
nombre <- Spectra_list[[i]]@metaData$file
# Comprobar los patrones y asignar el estado correspondiente
if (str_detect(nombre, patron_ctl_sano)) {
df_metadatos$estado[i] <- "CTL_SANO"
} else if (str_detect(nombre, patron_ctl_uti)) {
df_metadatos$estado[i] <- "CTL_UTI"
} else if (str_detect(nombre, patron_sepsis)) {
df_metadatos$estado[i] <- "SEPSIS"
} else if (str_detect(nombre, patron_shock)) {
df_metadatos$estado[i] <- "SHOCK"
}
# Guardo metadata en el espectro
Spectra_list[[i]]@metaData$estado <- df_metadatos$estado[i]
Spectra_list[[i]]@metaData$paciente <- df_metadatos$paciente[i]
Spectra_list[[i]]@metaData$dia <- df_metadatos$dia[i]
Spectra_list[[i]]@metaData$replica_b <- df_metadatos$replica_b[i]
Spectra_list[[i]]@metaData$replica_t <- df_metadatos$replica_t[i]
}
# Suponiendo que tu DataFrame se llama df_metadatos
# Corregir las filas 321 a 331 con la fecha correcta
df_metadatos$dia[321:331] <- "05-06"
# Convertir la columna "dia" a formato de fecha (usando año 2024)
df_metadatos$fecha <- as.Date(paste0("2024-", df_metadatos$dia), format = "%Y-%d-%m")
# Ahora, agrupar por paciente y calcular el "día 0"
df_metadatos <- df_metadatos %>%
group_by(paciente) %>%
mutate(
# Asignar "dia_abs = 0" si la fecha es NA
dia_abs = case_when(
is.na(fecha) ~ 0,  # Si la fecha es NA, asignar dia_abs = 0
TRUE ~ as.numeric(fecha - min(fecha))  # El resto, calcular los días desde el día 0
)
) %>%
ungroup()
View(df_metadatos)
